クラスは設計図でしかないので、その設計図に命令をしても意味がない
設計図を実態書かせることをインスタンス化といい

設計図であるクラスをもとにインスタンス化をして、初めて
情報を引き出したり、命令を出せる

カードゲームにおいて
カードが手札にあるだけでは効果が発揮されない、

バトルゾーンへ召喚することで、
「このモンスターをバトルゾーンへ出したときに○○を発動する」という召喚時に発動するメソッドがあり、
召喚によって、実体化して初めて、アタックとかブロックという命令を出せる
というイメージ
手札にあるモンスターに攻撃をさせたかったら、召喚して攻撃命令を出す必要がある。
これがクラスという感じで、たまに召喚しなくてもいいカードもある


APIであれば、手札にはない状態で、
使いたいときは山札から使いたいAPIを手札に引き出しておく必要があって、
そこからさらに、バトルゾーンへ召喚をして、インスタンス化をさせるという状態
java.langとかは常に手札に持っておくことができるカード的な奴

モノは静止している状態の物体だが、
モノ以外にも処理や動作をクラスとして定義することもあり、それは設計図ではなく台本と考える
処理をモノ化するときは台本を作るイメージ
物体をモノ化するときは設計図を作るイメージ

モンスターカードを召喚するときに、召喚という処理をするためのクラスも必要だし、
バトルゾーンに出たときに能力が発動するための、召喚時スキル処理クラスも必要で、
モンスターが敗北したときに墓地へ置かれる処理も必要

基礎編ではメインクラスの直下にはメソッドしか定義されていませんでしたが、
直下に変数や定数を定義することができ、それらが、属性（プロパティ）となります。
そういったものをフィールドといいます。

モノのクラスでは、値や、どんな命令が実行できるのかという設計図になっており、
処理のクラスでは、どんな手順で処理をしていくのかという台本になっています。

インスタンスするときはクラス名を型として使うが
クラスは基本的には参照型である。
そのクラスにいくつかのデータがあり、数値や文字列など
int や char型のデータへの参照となっている塊である。

new でインスタンス化したものを　変数名に代入することで、参照場所を格納できる。
newだけの定義だとその時だけの値を使うことになるので、参照型として以降使う必要がないのであれば、
newで一瞬だけインスタンス化して使うこともできる。
